
" Remove Trailing whitespace in file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
" NERDtree open on start
let g:nerdtree_tabs_open_on_console_startup=1
" autocmd VimEnter * NERDTree "Works well but switches cursor here
" autocmd VimEnter * belowright split Scratch
autocmd BufEnter * NERDTreeMirror
" NERD Tree Toggle
map <C-n> :NERDTreeToggle<CR>

" Close NERDTree if last window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Sensible Defaults
set nocompatible
set encoding=utf-8
set fileencoding=utf-8

" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/vundle'

"---   :PluginInstall
Plugin 'vim-scripts/Nekthuth'
Plugin 'vim-scripts/stata.vim'

" Better Code
Plugin 'scrooloose/syntastic'
Plugin 'tomtom/tcomment_vim'
Plugin 'vim-scripts/scratch.vim'

" NERDtree
<<<<<<< HEAD
Bundle 'fholgado/minibufexpl.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'kchmck/vim-coffee-script'
=======
Plugin 'fholgado/minibufexpl.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
>>>>>>> f881e4c15cf68433d7bf1a44077a9b14d794e434

" Proper JS Formatting
Plugin 'maksimr/vim-jsbeautify'
Plugin 'einars/js-beautify'
let g:jsbeautify_file = fnameescape(fnamemodify(expand("<sfile>"), ":h")."/bundle/js-beautify/beautify.js")
autocmd FileType javascript noremap <buffer>  = :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" augroup filetypedetect
"   autocmd! BufRead,BufNewFile *.ado       set filetype=stata
"   autocmd! BufRead,BufNewFile *.class    set filetype=stata
"   autocmd! BufRead,BufNewFile *.do         set filetype=stata
" augrougp END

" noremap <C-f1> :bprev<CR>
" noremap <C-f2> :bnext<CR>

noremap W :bprev<CR>
" noremap r :bnext<CR>

noremap \ ,
let mapleader = ","

" Spell checking
""" Pressing \ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Get Search to appear in the middle of the screen
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz
" Get cursor to appear in the middle of the screen by setting SO large
" set scrolloff=5
" set so=5
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>


vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>


" MiniBufExpl Sensible Defaults
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" MiniBufExpl Colors
hi MBENormal               guifg=#808080 guibg=fg
hi MBEChanged              guifg=#CD5907 guibg=fg
hi MBEVisibleNormal        guifg=#5DC2D6 guibg=fg
hi MBEVisibleChanged       guifg=#F1266F guibg=fg
hi MBEVisibleActiveNormal  guifg=#A6DB29 guibg=fg
hi MBEVisibleActiveChanged guifg=#F1266F guibg=fg



" Save and Browse
nnoremap <Leader>w :w<CR>:Ex<CR><CR>
nnoremap <Leader>ex :Ex<CR>

" Tabs
""" makes tabs characters 2 columns long
set tabstop=4
""" controls how tabs are set w/indent operations
set shiftwidth=4
set softtabstop=4
set expandtab


" Launch Browser
nnoremap <F12>j :exe '!jekyll build'<CR>
nnoremap <F12>f :exe ':silent !open -a /Applications/Firefox.app %'<CR>
nnoremap <F12>c :exe ':silent !open -a /Applications/Google\ Chrome.app %'<CR>
nnoremap <F12>g :exe ':silent !open -a /Applications/Google\ Chrome.app %'<CR>
nnoremap <F12>s :exe ':silent !open /Applications/Safari.app %'<CR>


" Change Window
nnoremap <C-Up> :wincmd k<CR>
nnoremap <C-Down> :wincmd j<CR>
nnoremap <C-Left> :wincmd h<CR>
nnoremap <C-Right> :wincmd l<CR>
" Tabs
nnoremap <S-Left> :tabprevious<CR>
nnoremap <S-Right> :tabnext<CR>

" Change to current working directory and display change
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" No display  nnoremap ,cd :cd %:p:h<CR>
cabbr <expr> %% expand('%:p:h')
nnoremap <Leader>e :e <C-R>=expand('%:p:h') . '/'<CR>


" OPEN FILES IN TABS
" vim -p file1 file2 file3
" set tabpagemax=15
" set showtabline=2
" REPLACE IN ALL TABS...
" :tabdo %s/foo/bar/g
" SET TAB NUMBER
" :tabm 5 for position 6
" nnoremap ,t <Esc>:tabnew<CR
" imap ,t <Esc>:tabnew<CR

"folding settings
set foldmethod=syntax
" set foldmethod=indent   "fold based on indent
" set foldnestmax=10      "deepest fold is 10 levels
" set nofoldenable        "dont fold by default
" set foldlevel=1         "this is just what i use

nnoremap <Space> zA
vnoremap <Space> zf

" Apperance
""" Syntax highlighting
syntax enable
""" Allows for syntax highliting
syntax on
set antialias
""" Shows line number starting from line 1
" set relativenumber "set number
" hi relativenumber term=none cterm=none ctermbg=0
""" Allows long line wrapping /// set wrap
set nowrap
" Add in for coffeescript / moved to allow for coffeescript work
" filetype on
" filetype indent on
" filetype plugin on
filetype plugin indent on

" set cuc " Highlight current column
set cul " Highlight current line

""" Adjust highlight for current line/column
" hi CursorLine term=none cterm=none ctermbg=0
" hi CursorColumn term=none cterm=none ctermbg=0


""" Makes background black
"set bg=dark
" colorscheme tomorrow-night-bright
" set background=dark

" Statusline Color Scheme 1 - %1
hi User1 guifg=#222222 ctermfg=1 guibg=#424242 ctermbg=0
" Statusline
set laststatus=2
set statusline=
set statusline +=%1*%<
set statusline +=%1*%f
set statusline +=%1*\ %h%m%r
set statusline +=%1*\%{&spelllang}
set statusline +=%1*%y
set statusline +=%1*\%=
set statusline +=%1*\%{v:register}
set statusline +=%1*\ %l,%c%V%*
set statusline +=%1*\ -
set statusline +=%1*\ \%L%*
" Alternate acitve window color
au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=undercurl guisp=Magenta guibg=Red


" set statusline=%F%m%r%h%w\
" set statusline+=[FORMAT=%{&ff}]\
" set statusline+=[TYPE=%Y]\
" set statusline+=[ASCII=\%03.3b]\
" set statusline+=[HEX=\%02.2B]\
" set statusline+=[POS=%04l,%04v][%p%%]\
" set statusline+=[LEN=%l(%c%V)/%L]

" %c%V == Current Column
" %l == Current Line
" %L == Total lines

" Play nice with modern computers
""" Enable mouse support in console "
set mouse=a
""" Enable system wide copy paste
set clipboard+=unnamed
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>
""" Set 256 colors
set t_Co=256
""" OS X keybinding for end of line, beginning of line
map <D-><Left> ^
map <D-><Right> $
inoremap <D-Left> <Esc>^i
inoremap <D-Right> <Esc>$i

" Search - Incremental searching is sexy
set incsearch
" Search -  Highlight things that we find with the search
set hlsearch
" Search -  If capitalized, will search for capitals, otherwise ignore
set ignorecase
set smartcase

" Set GUI options
""" Change default font
set guifont=Monaco:h18
""" Hide toolbar
set guioptions-=T

" Become Evil...
"""""" noremap <Up> ""
"""""" noremap <Down> ""
"""""" noremap <Left> ""
" map <S-Down> <C-E>
" map <S-Up> <C-Y>

" For highlighting trailing whitespaces
nnoremap <Leader>wn :match ExtraWhitespace /^\s* \s*\<Bar>\s\+$/<CR>
nnoremap <Leader>wf :match<CR>


" I - Show Hidden
" C - Change tree roor to selected dir
" cd / CD - cd to dir, change tree root to it
" A - maximize NERDTree window
" m - for menu
" mdy
" mdyes

" Delete but trigger menu
" map <buffer> ,d mdy
" Delete w/o triggering menu
" autocmd NERDTree" map <buffer> ,d :call g:NERDTreeFileNode.GetSelected().delete()|call NERDTreeRender()<cr>
"
" autocmd FileType text setlocal textwidth=78
" autocmd FileType markdown setlocal wrap
" autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
" autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
" autocmd FileType coffee     setlocal shiftwidth=2 tabstop=2
" autocmd FileType handlebars setlocal shiftwidth=2 tabstop=2
" autocmd FileType scss  setlocal shiftwidth=2 tabstop=2
" autocmd FileType css   setlocal shiftwidth=2 tabstop=2
" autocmd FileType html  setlocal shiftwidth=2 tabstop=2
" autocmd FileType eruby setlocal shiftwidth=2 tabstop=2
" autocmd FileType eco   setlocal shiftwidth=2 tabstop=2

"Vundle end
call vundle#end()
filetype plugin indent on
